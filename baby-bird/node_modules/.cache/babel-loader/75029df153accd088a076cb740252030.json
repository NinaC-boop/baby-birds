{"ast":null,"code":"import _regeneratorRuntime from \"/mnt/d/Homework/Github/-/baby-bird/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/mnt/d/Homework/Github/-/baby-bird/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/mnt/d/Homework/Github/-/baby-bird/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/mnt/d/Homework/Github/-/baby-bird/src/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport BotMessage from \"./components/BotMessage\";\nimport UserMessage from \"./components/UserMessage\";\nimport Messages from \"./components/Messages\";\nimport Input from \"./components/Input\";\nimport API from \"./ChatbotAPI\";\nimport \"./styles.css\";\nimport Header from \"./components/Header\";\n\nfunction Chatbot() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  useEffect(function () {\n    function loadWelcomeMessage() {\n      return _loadWelcomeMessage.apply(this, arguments);\n    }\n\n    function _loadWelcomeMessage() {\n      _loadWelcomeMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                setMessages([/*#__PURE__*/React.createElement(BotMessage, {\n                  key: \"0\",\n                  fetchMessage: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return API.GetChatbotResponse(\"hi\");\n\n                          case 2:\n                            return _context.abrupt(\"return\", _context.sent);\n\n                          case 3:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  })),\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 20,\n                    columnNumber: 9\n                  }\n                })]);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      return _loadWelcomeMessage.apply(this, arguments);\n    }\n\n    loadWelcomeMessage();\n  }, []);\n\n  var send = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(text) {\n      var newMessages;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              newMessages = messages.concat( /*#__PURE__*/React.createElement(UserMessage, {\n                key: messages.length + 1,\n                text: text,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 31,\n                  columnNumber: 7\n                }\n              }), /*#__PURE__*/React.createElement(BotMessage, {\n                key: messages.length + 2,\n                fetchMessage: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return API.GetChatbotResponse(text);\n\n                        case 2:\n                          return _context3.abrupt(\"return\", _context3.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                })),\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 32,\n                  columnNumber: 7\n                }\n              }));\n              setMessages(newMessages);\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function send(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatbot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Messages, {\n    messages: messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    onSend: send,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/React.createElement(Chatbot, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 17\n  }\n}), rootElement);","map":{"version":3,"sources":["/mnt/d/Homework/Github/-/baby-bird/src/index.js"],"names":["React","useState","useEffect","ReactDOM","BotMessage","UserMessage","Messages","Input","API","Header","Chatbot","messages","setMessages","loadWelcomeMessage","GetChatbotResponse","send","text","newMessages","concat","length","rootElement","document","getElementById","render"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,OAAO,cAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACjB,kBAAgCT,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOU,QAAP;AAAA,MAAiBC,WAAjB;;AAEAV,EAAAA,SAAS,CAAC,YAAM;AAAA,aACCW,kBADD;AAAA;AAAA;;AAAA;AAAA,qFACd;AAAA;AAAA;AAAA;AAAA;AACED,gBAAAA,WAAW,CAAC,cACV,oBAAC,UAAD;AACE,kBAAA,GAAG,EAAC,GADN;AAEE,kBAAA,YAAY,wEAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAkBJ,GAAG,CAACM,kBAAJ,CAAuB,IAAvB,CAAlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAF,EAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADU,CAAD,CAAX;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADc;AAAA;AAAA;;AASdD,IAAAA,kBAAkB;AACnB,GAVQ,EAUN,EAVM,CAAT;;AAYA,MAAME,IAAI;AAAA,yEAAG,kBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,cAAAA,WADK,GACSN,QAAQ,CAACO,MAAT,eAClB,oBAAC,WAAD;AAAa,gBAAA,GAAG,EAAEP,QAAQ,CAACQ,MAAT,GAAkB,CAApC;AAAuC,gBAAA,IAAI,EAAEH,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADkB,eAElB,oBAAC,UAAD;AACE,gBAAA,GAAG,EAAEL,QAAQ,CAACQ,MAAT,GAAkB,CADzB;AAEE,gBAAA,YAAY,wEAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAkBX,GAAG,CAACM,kBAAJ,CAAuBE,IAAvB,CAAlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAF,EAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFkB,CADT;AAQXJ,cAAAA,WAAW,CAACK,WAAD,CAAX;;AARW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAJF,IAAI;AAAA;AAAA;AAAA,KAAV;;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEJ,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEI,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD;;AAED,IAAMK,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AACAnB,QAAQ,CAACoB,MAAT,eAAgB,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA6BH,WAA7B","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport BotMessage from \"./components/BotMessage\";\nimport UserMessage from \"./components/UserMessage\";\nimport Messages from \"./components/Messages\";\nimport Input from \"./components/Input\";\n\nimport API from \"./ChatbotAPI\";\n\nimport \"./styles.css\";\nimport Header from \"./components/Header\";\n\nfunction Chatbot() {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    async function loadWelcomeMessage() {\n      setMessages([\n        <BotMessage\n          key=\"0\"\n          fetchMessage={async () => await API.GetChatbotResponse(\"hi\")}\n        />\n      ]);\n    }\n    loadWelcomeMessage();\n  }, []);\n\n  const send = async text => {\n    const newMessages = messages.concat(\n      <UserMessage key={messages.length + 1} text={text} />,\n      <BotMessage\n        key={messages.length + 2}\n        fetchMessage={async () => await API.GetChatbotResponse(text)}\n      />\n    );\n    setMessages(newMessages);\n  };\n\n  return (\n    <div className=\"chatbot\">\n      <Header />\n      <Messages messages={messages} />\n      <Input onSend={send} />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Chatbot />, rootElement);\n"]},"metadata":{},"sourceType":"module"}